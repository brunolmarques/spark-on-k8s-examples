#
# Copyright 2018 CERN/Switzerland
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Example:
# ./sparkctl create ./jobs/tpcds-datagen.yaml

apiVersion: "sparkoperator.k8s.io/v1alpha1"
kind: SparkApplication
metadata:
  name: tpcds-data-gen
  namespace: default
spec:
  type: Scala
  mode: cluster
  # Use staging (tpcds image)
  image: gitlab-registry.cern.ch/db/spark-service/docker-registry/spark:v2.4.0-hadoop3.1-examples
  imagePullPolicy: IfNotPresent
  mainClass: ch.cern.tpcds.DataGenTPCDS
  mainApplicationFile: local:///opt/spark/examples/jars/spark-service-examples_2.11-0.3.0.jar
  mode: cluster
  arguments:
  # working directory to write data
    - "s3a://{{ custom-bucket }}/TPCDS-TEST"
  # Path to kit in the docker image
    - "/opt/tpcds-kit/tools"
  # Scale factor (in GB)
    - "1"
  # Generate data num partitions
    - "100"
  # Create the partitioned fact tables
    - "false"
  # Shuffle to get partitions coalesced into single files.
    - "false"
  # Logging set to WARN
    - "true"
  deps:
    jars:
      - local:///opt/spark/examples/jars/scala-logging_2.11-3.9.0.jar
      - local:///opt/spark/examples/jars/spark-sql-perf_2.11-0.5.0-SNAPSHOT.jar
  hadoopConf:
    # By default, using cern provided spark-operator,
    # you are authenticated to use bucket of your cluster {{ cluster-name }}
    # This settings allow you to authenticate to custom bucket {{ custom-bucket }} in cs3.cern.ch endpoint
    "fs.s3a.endpoint": {{ endpoint }}
    "fs.s3a.bucket.{{ custom-bucket }}.access.key": {{ access }}
    "fs.s3a.bucket.{{ custom-bucket }}.secret.key": {{ secret }}
  sparkConf:
    "spark.network.timeout": "1200"
    # S3 Specific config (remove if s3 not used)
    "spark.hadoop.fs.s3a.connection.timeout": "1200000"
    "spark.hadoop.fs.s3a.path.style.access": "true"
    "spark.hadoop.fs.s3a.connection.maximum": "200"
    "spark.hadoop.fs.s3a.fast.upload": "true"
    "spark.hadoop.mapreduce.fileoutputcommitter.algorithm.version": "2"
    "spark.sql.parquet.mergeSchema": "false"
    "spark.sql.parquet.filterPushdown": "true"
    # For S3 writing, we need to disable speculation to have consistent writes
    "spark.speculation": "false"
  driver:
    cores: 4
    coreLimit: "4096m"
    memory: "6000m"
    labels:
      version: 2.4.0
    serviceAccount: spark
  executor:
    instances: 5
    cores: 2
    memory: "6000m"
    labels:
      version: 2.4.0
  restartPolicy: Never
