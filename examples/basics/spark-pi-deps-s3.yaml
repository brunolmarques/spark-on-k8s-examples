# Example:
#
# Stage dependencies
# $ s3cmd put {{path-to-examples}}/libs/spark-service-examples_2.11-0.3.0.jar s3://{{custom-bucket}}/spark-service-examples_2.11-0.3.0.jar
# $ s3cmd put {{path-to-examples}}/libsspark-sql-perf_2.11-0.5.0-SNAPSHOT.jar s3://{{custom-bucket}}/spark-sql-perf_2.11-0.5.0-SNAPSHOT.jar
#
# Submit
# $ ./sparkctl create ./jobs/spark-pi-deps-s3.yaml

apiVersion: "sparkoperator.k8s.io/v1alpha1"
kind: SparkApplication
metadata:
  name: spark-pi
  namespace: default
spec:
  type: Scala
  mode: cluster
  image: gitlab-registry.cern.ch/db/spark-service/docker-registry/spark:v2.4.0-hadoop3.1
  imagePullPolicy: IfNotPresent
  mainClass: ch.cern.sparkrootapplications.examples.SparkPi
  mainApplicationFile: s3a://{{custom-bucket}}/spark-service-examples_2.11-0.3.0.jar
  mode: cluster
  deps:
    files:
      - s3a://{{custom-bucket}}/spark-sql-perf_2.11-0.5.0-SNAPSHOT.jar
  hadoopConf:
    # This settings allow you to authenticate to custom bucket {{ custom-bucket }} in cs3.cern.ch endpoint
    "fs.s3a.endpoint": {{endpoint}}
    "fs.s3a.bucket.{{custom-bucket}}.access.key": {{access}}
    "fs.s3a.bucket.{{custom-bucket}}.secret.key": {{secret}}
  driver:
    cores: 1
    coreLimit: "1000m"
    memory: "1024m"
    labels:
      version: 2.4.0
    serviceAccount: spark
  executor:
    instances: 1
    cores: 1
    memory: "2048m"
    labels:
      version: 2.4.0
  restartPolicy: Never