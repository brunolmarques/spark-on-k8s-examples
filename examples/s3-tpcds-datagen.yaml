# Prepare bucket
# $ touch tpcds.init
# $ s3cmd put tpcds.init s3://{{ custom-bucket }}/TPCDS-TEST/tpcds.init
#
# Submit job
# $ sparkctl create ./jobs/tpcds-datagen.yaml

apiVersion: "sparkoperator.k8s.io/v1beta1"
kind: SparkApplication
metadata:
  name: tpcds-data-gen
  namespace: default
spec:
  type: Scala
  mode: cluster
  image: gitlab-registry.cern.ch/db/spark-service/spark-k8s-examples:v1.1-060519
  # if to pull new image if time: imagePullPolicy: Always
  sparkVersion: 2.4.1
  mainClass: ch.cern.tpcds.DataGenTPCDS
  mainApplicationFile: local:///usr/hdp/spark/examples/jars/spark-k8s-examples-assembly-1.1.jar
  mode: cluster
  arguments:
  # working directory to write data
    - "s3a://{{ custom-bucket }}/TPCDS-TEST"
  # Path to kit in the docker image
    - "/opt/tpcds-kit/tools"
  # Scale factor (in GB)
    - "1"
  # Generate data num partitions
    - "100"
  # Create the partitioned fact tables
    - "false"
  # Shuffle to get partitions coalesced into single files.
    - "false"
  # Logging set to WARN
    - "true"
  deps:
    jars:
      - local:///usr/hdp/spark/work-dir/scala-logging_2.11-3.9.0.jar
      - local:///usr/hdp/spark/work-dir/spark-sql-perf_2.11-0.5.0-SNAPSHOT.jar
  hadoopConf:
    "fs.s3a.endpoint": {{ endpoint }}
    "fs.s3a.bucket.{{ custom-bucket }}.access.key": {{ access }}
    "fs.s3a.bucket.{{ custom-bucket }}.secret.key": {{ secret }}
  sparkConf:
    "spark.network.timeout": "1200"
    # S3 Specific config (remove if s3 not used)
    "spark.hadoop.fs.s3a.connection.timeout": "1200000"
    "spark.hadoop.fs.s3a.path.style.access": "true"
    "spark.hadoop.fs.s3a.connection.maximum": "200"
    "spark.hadoop.fs.s3a.fast.upload": "true"
    # For S3 writing, we need to disable speculation to have consistent writes
    "spark.speculation": "false"
    "spark.hadoop.fs.s3a.committer.name": "directory"
    "spark.hadoop.fs.s3a.committer.staging.conflict-mode": "append"
    "spark.hadoop.mapreduce.outputcommitter.factory.scheme.s3a": "org.apache.hadoop.fs.s3a.commit.S3ACommitterFactory"
  driver:
    cores: 1
    coreLimit: "1096m"
    memory: "2000m"
    labels:
      version: 2.4.0
    serviceAccount: spark
  executor:
    instances: 1
    cores: 1
    memory: "2000m"
    labels:
      version: 2.4.0
  restartPolicy:
    type: Never
